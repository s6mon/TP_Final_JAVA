options{STATIC=false;}PARSER_BEGIN(Reader)package reader;import Circuit.*;

public class Reader extends ReaderUtilities {	public _Circuit read() throws Exception {return DEF_CIRCUIT(); }}PARSER_END(Reader)SKIP :{" " |"\r" | "\t" | "\n" }TOKEN :{  < PARO: "(" >| < PARF: ")" >| < CROO: "[" >| < CROF: "]" >| < CADO: "<" >| < CADF: ">" >| < DIESE: "#" >| < FLECHE: "->" >| < VIRGULE: "," >| < NUM: ( <DIGIT> )+ >| < ID: <LETTER> (<DIGIT> | <LETTER>)+>| < PIPE: "|" >| <#LETTER: ["a"-"z","A"-"Z"] >| <#DIGIT: ["0" - "9"] >}TOKEN :{  < COMPOSANT: < COMPOSITE > | < ELEMENTAIRE > >| < ETAT_ITR: "haut" | "bas" >| < ETAT_LED: "eteint" | "allume" >| < COMPOSITE: "Oux" >| < ELEMENTAIRE: < RECEPTEUR > | < GENERATEUR > | < TRANSFORMATEUR > >| < RECEPTEUR: "Led" >| < GENERATEUR: "Gnd" | "Vcc" | "Itr" >| < TRANSFORMATEUR: "Et" | "Ou" | "Non" >}_CIRCUIT DEF_CIRCUIT() : {}{	(DEF_COMPOSANT())*	("circuit" name=<ID> <variable> = CIRCUIT() { return ...;})?	{ return c;}}*/void NB_CONNEXION_IN_OUT() : {}{	< PARO > < NUM > < VIRGULE > < NUM > < PARF >}void DEF_COMPOSITE() : {}{  	< CADO >  	< NUM >  	< PIPE >  	NB_CONNEXION_IN_OUT()  	< CROO >  	(INFO_CONNEXION())*  	(DEF_COMPOSANT())+  	< CROF >  	(< FLECHE >  (INFO_CONNEXION())+ )* }void DEF_COMPOSANT() : {}{    < CADO >  	< NUM >  	< PIPE >  	< COMPOSANT >  	NB_CONNEXION_IN_OUT()  	(< ETAT_ITR >| < ETAT_LED >)?  	(< FLECHE >  (INFO_CONNEXION())+ )*     	< CADF >}void INFO_CONNEXION() : {}{  	< DIESE > < NUM > < PARO > < NUM > < DIESE > < NUM > (< VIRGULE > < NUM > < DIESE > < NUM >)*}  	